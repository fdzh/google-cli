#!/usr/bin/python
#
# Copyright (C) 2008 Henri Hakkinen
#
# Modified (2015) by Arun Prakash Jana <engineerarun@gmail.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import sys
import termios, fcntl, struct
import webbrowser
import HTMLParser
import urlparse

from urllib import quote_plus, unquote
from httplib import HTTPSConnection
from getopt import getopt, GetoptError

# Global variables
columns  = None    # Terminal window size.
start    = "0"     # The first result to display (option -s)
num      = None    # Number of results to display (option -n)
lang     = None    # Language to search for (option -l)
openUrl  = False   # If True, opens the first URL in browser (option -j)
colorize = True    # If True, colorizes the output (option -C)
filetype = None    # Filetype specific search
duration = None    # Time limit search (option -t) [e.g. d5, w5, m5, y5]
conn     = None    # Use a single global connection during navigation
nav      = "n"     # For user navigation

# Classes
class GoogleParser(HTMLParser.HTMLParser):
    def __init__(self):
        HTMLParser.HTMLParser.__init__(self)
        self.handle_starttag = self.main_start
        self.handle_data = self.main_data
        self.handle_endtag = self.main_end
    def main_start(self, tag, attrs):
        if tag == "li" and len(attrs) > 0 and attrs[0] == ("class", "g"):
            self.title = ""
            self.url   = ""
            self.text  = ""
            self.handle_starttag = self.li_start
            self.handle_data = self.li_data
            self.handle_endtag = self.li_end
    def main_data(self, data):
        pass
    def main_end(self, tag):
        pass
    # <li class="g"> ... </li>
    def li_start(self, tag, attrs):
        if tag == "h3":
            self.handle_starttag = self.h3_start
            self.handle_data = self.h3_data
            self.handle_endtag = self.h3_end
        elif tag == "div" and len(attrs) > 0 and attrs[0] == ("class", "s"):
            self.handle_starttag = self.div_start
            self.handle_data = self.div_data
            self.handle_endtag = self.div_end
    def li_data(self, data):
        pass
    def li_end(self, tag):
        if tag == "div":
            marker = self.url.find("?q=")
            if marker >= 0:
                self.url = self.url[marker + 3:]
            marker = self.url.find('&sa')
            if marker >= 0:
                self.url = self.url[:marker]

            print_entry(self.title, self.url, self.text)
            self.handle_starttag = self.main_start
            self.handle_data = self.main_data
            self.handle_endtag = self.main_end
    # <h3> ... </h3>
    def h3_start(self, tag, attrs):
        if tag == "a":
            self.url = attrs[0][1]
    def h3_data(self, data):
        self.title += data
    def h3_end(self, tag):
        if tag == "h3":
            self.handle_starttag = self.li_start
            self.handle_data = self.li_data
            self.handle_endtag = self.li_end
    # <div> ... </div>
    def div_start(self, tag, attrs):
        if tag == "span" and len(attrs) > 0 and attrs[0] == ("class", "st"):
            self.handle_starttag = self.span_start
            self.handle_data = self.span_data
            self.handle_endtag = self.span_end
    def div_data(self, data):
        pass
    def div_end(self, tag):
        pass
    def span_start(self, tag, start):
        pass
    def span_data(self, data):
        self.text += data
    def span_end(self, tag):
        if tag == "span":
            self.handle_starttag = self.li_start
            self.handle_data = self.li_data
            self.handle_endtag = self.li_end


# Functions
def print_entry(title, url, text):
    # Clean up URL for cases like %22 changed to %2522
    url = unquote(url)

    # Open the URL in a web browser if option -j was specified.
    if openUrl:
        # If empty URL, like first result of 'define hello', just print the result
        if url == "":
            print "Showing in console as URL is empty\n"
        else:
            webbrowser.open(url)
            conn.close()
            sys.exit(0)
    # Print the title and the URL.
    if colorize:
        print "\x1B[1m\x1B[36m* \x1B[92m", title, "\x1B[0m\n\x1B[93mURL:", url, "\x1B[39m"
    else:
        print "* ", title, "\nURL:", url
    # Print the text with truncating.
    col = 0
    for w in text.split():
        if (col + len(w) + 1) > columns:
            col = 0
            print
        print w,
        col += len(w) + 1
    print
    print

def usage():
    print "Usage: google [OPTIONS] KEYWORDS..."
    print "Performs a Google search and prints the results to stdout.\n"
    print "Options"
    print "  -s N     start at the Nth result"
    print "  -n N     show N results (default 10)"
    print "  -l LANG  display in language LANG, such as fi for Finnish"
    print "  -C       disable color output"
    print "  -j       open the first result in a web browser"
    print "  -f MIME  search for specific file type"
    print "  -t dN    time limit search [e.g. d5: 5 days, w5: 5 weeks, m5: 5 months, y5: 5 years]\n"
    print "Keys"
    print "  n, p     press 'n' or 'p' and Enter to navigate forward and backward\n"
    print "Copyright (C) 2008 Henri Hakkinen."
    print "Modified (2015) by Arun Prakash Jana <engineerarun@gmail.com>"
    print "Report bugs to https://github.com/jarun/google-cli/issues"
    sys.exit(1)

########### Program Main

# Process command line options.
optlist = None
keywords = None

if len(sys.argv) < 2:
    usage()

try:
    optlist, keywords = getopt(sys.argv[1:], "s:n:l:f:t:Cj")
    for opt in optlist:
        if opt[0] == "-s":
            # Option -s N
            if not opt[1].isdigit():
                print "google: option -s needs an integer"
                sys.exit(1)
            start = opt[1]
        elif opt[0] == "-n":
            # Option -n N
            if not opt[1].isdigit():
                print "google: option -n needs an integer"
                sys.exit(1)
            num = opt[1]
        elif opt[0] == "-l":
            # Option -l LANG
            lang = opt[1]
        elif opt[0] == "-C":
            # Option -C
            colorize = False
        elif opt[0] == "-j":
            # Option -j
            openUrl = True
            if num is None:
                num = "1"
        elif opt[0] == "-f":
            # Option -f MIME
            filetype = opt[1]
        elif opt[0] == "-t":
            # Option -t dN
            duration = opt[1]
            if not opt[1][0] in ("d","w","m","y",):
                usage()
                sys.exit(1)
            if not opt[1][1].isdigit():
                usage()
                sys.exit(1)
    if len(keywords) < 1:
        usage()
except GetoptError, e:
    print "google:", e
    sys.exit(1)

# Construct the query URL.
url = "/search?"

if start is not None:
    url += "start=" + start + "&"
if num is not None:
    url += "num=" + num + "&"
if lang is not None:
    url += "hl=" + lang + "&"
if duration is not None:
    url += "as_qdr=" + duration + "&"

url += "q=" + quote_plus(keywords[0])
for kw in keywords[1:]:
    url += "+" + quote_plus(kw)

if filetype is not None:
    url += "+filetype:" + filetype

#if not openUrl:
#    print "\nSearch URL: https://www.google.com%s\n" % url

# Get the terminal window size.
winsz = fcntl.ioctl(sys.stdout, termios.TIOCGWINSZ, "1234")
columns = struct.unpack("HH", winsz)[1]

# Connect to Google and request the result page.
conn = HTTPSConnection("guge.party")

while nav == "n" or nav == "p":
    conn.request("GET", url)
    resp = conn.getresponse()
    if resp.status != 200:
        if resp.status in (301,302,):
            url = urlparse.urljoin(url, resp.getheader('location', ''))
            #print "Redirected to URL:", url, "\n"
            if url.find("sorry/IndexRedirect?") >= 0:
                print "ERROR: Connection blocked due to unusual activity."
                sys.exit(1)
            conn.close()
            conn = HTTPSConnection(url[url.find("//") + 2:url.find("/search")])
            conn.request("GET", url)
            resp = conn.getresponse()
            if resp.status != 200:
                # Failed connecting to redirected server too!
                print "ERROR after 1st redirection:", str(resp.status), ": ", resp.reason
                conn.close()
                sys.exit(1)
        else:
            # The server responded with an error.
            print "ERROR:", str(resp.status), ": ", resp.reason
            conn.close()
            sys.exit(1)

    # Parse the HTML document and print the results.
    parser = GoogleParser()
    parser.feed(resp.read())

    oldstart = start
    nav = raw_input("Press 'n' or 'p' and Enter to continue... ")
    if nav == "n":
        if num is not None:
            start = str(int(start) + int(num))
        else:
            start = str(int(start) + 10)
        print "\n\x1B[91m\x1B[1m     *****     *****     *****     *****     \x1B[0m\n"
    elif nav == "p":
        if num is not None:
            start = str(int(start) - int(num))
        else:
            start = str(int(start) - 10)
        print "\n\x1B[91m\x1B[1m     *****     *****     *****     *****     \x1B[0m\n"

    if int(start) < 0:
        start = "0"

    url = url.replace("start=" + oldstart + "&", "start=" + start + "&", 1)
    #print "new url: ", url

conn.close()
